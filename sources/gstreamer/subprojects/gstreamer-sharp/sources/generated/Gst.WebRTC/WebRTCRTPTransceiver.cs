// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.WebRTC {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class WebRTCRTPTransceiver : Gst.Object {

		protected WebRTCRTPTransceiver (IntPtr raw) : base(raw) {}

		protected WebRTCRTPTransceiver() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("codec-preferences")]
		public Gst.Caps CodecPreferences {
			get {
				GLib.Value val = GetProperty ("codec-preferences");
				Gst.Caps ret = (Gst.Caps) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value, "GstCaps*");
				SetProperty("codec-preferences", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("current-direction")]
		public Gst.WebRTC.WebRTCRTPTransceiverDirection CurrentDirection {
			get {
				GLib.Value val = GetProperty ("current-direction");
				Gst.WebRTC.WebRTCRTPTransceiverDirection ret = (Gst.WebRTC.WebRTCRTPTransceiverDirection) (Enum) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("direction")]
		public Gst.WebRTC.WebRTCRTPTransceiverDirection Direction {
			get {
				GLib.Value val = GetProperty ("direction");
				Gst.WebRTC.WebRTCRTPTransceiverDirection ret = (Gst.WebRTC.WebRTCRTPTransceiverDirection) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("direction", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("kind")]
		public Gst.WebRTC.WebRTCKind Kind {
			get {
				GLib.Value val = GetProperty ("kind");
				Gst.WebRTC.WebRTCKind ret = (Gst.WebRTC.WebRTCKind) (Enum) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("mid")]
		public string Mid {
			get {
				GLib.Value val = GetProperty ("mid");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("mlineindex")]
		public uint Mlineindex {
			get {
				GLib.Value val = GetProperty ("mlineindex");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("receiver")]
		public Gst.WebRTC.WebRTCRTPReceiver Receiver {
			get {
				GLib.Value val = GetProperty ("receiver");
				Gst.WebRTC.WebRTCRTPReceiver ret = (Gst.WebRTC.WebRTCRTPReceiver) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("sender")]
		public Gst.WebRTC.WebRTCRTPSender Sender {
			get {
				GLib.Value val = GetProperty ("sender");
				Gst.WebRTC.WebRTCRTPSender ret = (Gst.WebRTC.WebRTCRTPSender) val;
				val.Dispose ();
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (Gst.Object.class_abi.Fields);

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("gstwebrtc-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_webrtc_rtp_transceiver_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_webrtc_rtp_transceiver_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}


		static WebRTCRTPTransceiver ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (Gst.Object.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
