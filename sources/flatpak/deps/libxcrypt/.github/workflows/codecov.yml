name: "Code coverage"

on:
  pull_request:
  push:

jobs:
  skip_duplicates:
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        # pin to unreleased SHA so we can use 'same_content_newer'
        # see https://github.com/fkirc/skip-duplicate-actions/pull/112
        uses: fkirc/skip-duplicate-actions@98d1dc89f43a47f8e4fba8e1c1fb8d6c5fc515ee
        with:
          concurrent_skipping: 'same_content_newer'
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["doc/**", "**/*.md", ".gitignore", "libxcrypt.spec.rpkg", ".packit.yaml", "rpkg.macros", "AUTHORS", "ChangeLog", "COPYING.LIB", "LICENSING", "NEWS", "README", "THANKS", "TODO"]'
          do_not_skip: '["workflow_dispatch", "schedule"]'

  O0-Buildflags:
    needs: skip_duplicates
    if: ${{ needs.skip_duplicates.outputs.should_skip != 'true' }}

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        config_opts:
          - "--enable-obsolete-api --enable-hashes=all --enable-failure-tokens"
          - "--enable-obsolete-api --enable-obsolete-api-enosys --enable-hashes=all --enable-failure-tokens"
          - "--disable-obsolete-api --enable-hashes=all --enable-failure-tokens"
          # --enable-hashes=strong can only be used with --disable-obsolete-api
          - "--disable-obsolete-api --enable-failure-tokens --enable-hashes=strong"
          # failure tokens only affect the generic code so there's no point
          # testing with all of the hashes; use descrypt only, to get coverage
          # of the --enable-obsolete-api code in this mode, and to get coverage
          # of an "only one hash enabled" configuration.
          - "--enable-obsolete-api --disable-failure-tokens --enable-hashes=descrypt"

    env:
      CC: ${{ matrix.compiler }}
      CONFIG_OPTS: ${{ matrix.config_opts }}
      CFLAGS: "-O0 -g -fprofile-arcs -ftest-coverage"
      CXXFLAGS: "-O0 -g -fprofile-arcs -ftest-coverage"
      LDFLAGS: "--coverage"
      VERBOSE: 1

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install packages
      run: |
        packages="lcov"
        if [ "$CC" = clang ]; then
          # need 'llvm' for llvm-cov, as well as clang
          packages="$packages clang llvm"
        fi
        sudo apt-get install $packages

    - name: Versions of build tools
      id: build-tools
      run: ./build-aux/ci/ci-log-dependency-versions

    - name: Get nprocs
      run: echo "NPROCS=$((`nproc --all 2>/dev/null || sysctl -n hw.ncpu` * 2))" | tee $GITHUB_ENV

    - name: Cache bootstrap
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          INSTALL
          Makefile.in
          aclocal.m4
          config.h.in
          configure
          autom4te.cache/**
          build-aux/m4/libtool.m4
          build-aux/m4/ltoptions.m4
          build-aux/m4/ltsugar.m4
          build-aux/m4/ltversion.m4
          build-aux/m4/lt~obsolete.m4
          build-aux/m4-autogen/**
        key: autoreconf-${{ steps.build-tools.outputs.autotools-ver }}-${{ hashFiles('autogen.sh', 'configure.ac', 'Makefile.am', 'build-aux/m4/*.m4', 'build-aux/m4-autogen/**') }}

    - name: Bootstrap
      if: steps.cache.outputs.cache-hit != 'true'
      run: ./autogen.sh

    - name: Configure
      run: ./configure $CONFIG_OPTS

    - name: Build
      run: |
        make -j${{ env.NPROCS }} all
        make -j${{ env.NPROCS }} test-programs

    - name: Test
      run: make -j${{ env.NPROCS }} check

    - name: Summarize coverage data
      run: ./build-aux/ci/summarize-coverage coverage.info

    - name: Upload coverage data to Codecov
      uses: codecov/codecov-action@v2
      with:
        fail_ci_if_error: true
        files: coverage.info

    - name: Detailed error logs
      if: failure()
      run: ./build-aux/ci/ci-log-logfiles
