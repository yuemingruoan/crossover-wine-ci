[require]
shader model >= 6.0

[uav 0]
format r32g32b32a32-float
size(2d, 1, 4)

3.5 1.0 4.0 2.5
3.5 1.0 4.0 2.5
3.5 1.5 4.0 2.5
3.5 1.0 4.5 2.5

[uav 1]
format r32g32b32a32-float
size(2d, 1, 8)

0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0

[compute shader]

RWTexture2D<float4> u0;
RWTexture2D<float4> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    bool4 b = WaveActiveAllEqual(u0[uint2(0, id)]);
    u1[uint2(0, id)] = float4(b.x, b.y, b.z, b.w);
}

[test]
dispatch 4 1 1
probe uav 1 (0, 0) rgba (1, 0, 0, 1)
probe uav 1 (0, 1) rgba (1, 0, 0, 1)
probe uav 1 (0, 2) rgba (1, 0, 0, 1)
probe uav 1 (0, 3) rgba (1, 0, 0, 1)

[compute shader]

RWTexture2D<float4> u0;
RWTexture2D<float4> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    bool any = u0[uint2(0, id)].y == 1.5f;
    bool all = u0[uint2(0, id)].x == 3.5f;
    bool none = u0[uint2(0, id)].z == 3.0f;
    u1[uint2(0, id)] = float4(WaveActiveAnyTrue(any), WaveActiveAnyTrue(all), WaveActiveAnyTrue(none), 0);
    u1[uint2(0, 4 + id)] = float4(WaveActiveAllTrue(any), WaveActiveAllTrue(all), WaveActiveAllTrue(none), 0);
}

[test]
dispatch 4 1 1
probe uav 1 (0, 0) rgba (1, 1, 0, 0)
probe uav 1 (0, 1) rgba (1, 1, 0, 0)
probe uav 1 (0, 2) rgba (1, 1, 0, 0)
probe uav 1 (0, 3) rgba (1, 1, 0, 0)
probe uav 1 (0, 4) rgba (0, 1, 0, 0)
probe uav 1 (0, 5) rgba (0, 1, 0, 0)
probe uav 1 (0, 6) rgba (0, 1, 0, 0)
probe uav 1 (0, 7) rgba (0, 1, 0, 0)

[compute shader]

RWTexture2D<float4> u0;
RWTexture2D<float4> u1;

    [numthreads(4, 1, 1)]
void main(uint id : SV_GroupIndex)
{
    u1[uint2(0, id)] = WaveActiveSum(u0[uint2(0, id)]);
}

[test]
dispatch 4 1 1
probe uav 1 (0, 0) rgba (14.0, 4.5, 16.5, 10.0)
probe uav 1 (0, 1) rgba (14.0, 4.5, 16.5, 10.0)
probe uav 1 (0, 2) rgba (14.0, 4.5, 16.5, 10.0)
probe uav 1 (0, 3) rgba (14.0, 4.5, 16.5, 10.0)
